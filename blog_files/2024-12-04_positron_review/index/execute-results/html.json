{
  "hash": "ac191f2437431dd5b18f679953343a8b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Positron - a VSCode fork for Data Science\"\ndescription: \"At the end of June, the public beta version of Positron was released. That‚Äôs almost 6 months ago, and the Positron team certainly hasn‚Äôt been idle! So what happened over the last half year? And is it worth switching? üëÄ Some of my personal highlights about this IDE üëáüèª\"\nauthor: Luong Nguyen Thanh\ndate: \"2024-12-04\"\nimage: positron-UI.png\nimage-alt: \"User Interface of Positron\"\ncategories:\n  - Python\n  - R\n  - IDE\n  - Tool reviews\nnumber-sections: true\nnumber-depth: 2\n---\n\n\n\n::: {.callout-important}\n# Key notes\n* The Data Explorer is a great way to inspect your data! You see things like the percentage of missing data or summary statistics per column. There‚Äôs multi-sorting and filtering. Some things are known in RStudio as well, but this Data Explorer goes a few steps further.\n* Code completions works out-of-the-box for both R and Python.\n* Help on hover: get some help when hovering over functions\n* The use of extensions: you can use anything from Open VSX and it really makes the IDE ‚Äúyours‚Äù. Some cool ones are: indent-rainbow, TODO highlight and GitLens.\n* The test explorer: a separate pane for R packages with testthat that gives you all kind of insights and actions related to testing.\n:::\n\n## Hello Positron IDE ‚Äì Key Features You Must Know \n\nPositron is a next-generation data science IDE delivered by Posit. It‚Äôs still in active development, so it‚Äôs expected to see some features not working properly (more on this later). But, as mentioned in the introduction, it‚Äôs in public beta, which means you‚Äôre free to take it for a spin!\n\nYou can download the latest Positron release from the official GitHub releases page.\n\nIn essence, Positron is a fork of a famous IDE ‚Äì Visual Studio Code. If you‚Äôre familiar with it, Positron should feel right at home. It has some neat features delivered out of the box, but you could configure most of these through plugins on a fresh VSCode installation.\n\n\n## RStudio Meets Visual Studio Code \n\nHere‚Äôs what you‚Äôll see when you first launch Positron:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 1 ‚Äì Positron IDE welcome screen It certainly looks like a combination of RStudio and Visual Studio Code! You‚Äôve got your familiar sidebar for navigation and extensions, but also your four-panel view for code, console, plots, and variables.](image1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThe top left panel allows you to start working on your data science projects ‚Äì either in R or Python, through a notebook or file. Positron automatically detects installed programming languages and their version, but also picks up any virtual environments you‚Äôve previously created:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 2 ‚Äì File/project creation in Positron IDE Up next, let‚Äôs explore this multi-language and multi-format support in more detail.](image2.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Multi-Language Support \n\nThe big selling point of Positron IDE is that it comes configured for R and Python out of the box ‚Äì Jupyter Notebooks included. This means you don‚Äôt have to set everything up from scratch, which in the case of R and Jupyter is not as easy as it sounds.\n\nTo create a new R script, click on the New File button on the welcome screen and select R File. Writing and running code works just like in RStudio ‚Äì Command/Control + Enter will run the cell on which your cursor is located:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 3 ‚Äì Working with R files in Positron The same approach to writing and running code works in Python scripts ‚Äì write any code block you want and hit Command/Control + Enter to run it](image3.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 4 ‚Äì Working with Python files in Positron Still, we think Jupyter notebooks allow maximum flexibility. You can create a notebook with a default programming language profile (R or Python), but you can then change the language for each cell.](image4.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\nBecause of this flexibility, you can also sprinkle text/markdown content between your cells to provide resources or explanations:\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 5 ‚Äì Working with Jupyter Notebooks in Positron And that‚Äôs the basics of programming language and format support in Positron. Up next, let‚Äôs discuss some more advanced features.](image5.png){fig-align='center' width=80%}\n:::\n:::\n\n\n‚Äç\n\n\n## DataFrame Viewer \n\nDataframes are the core of all data science workflows, so having an IDE that can display all relevant information about them is a must-have feature.\n\nPositron allows you to print the dataframe content to the R console by calling R-specific functions, such as `head()`:\n\n‚Äç\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 6 ‚Äì Printing the top 6 rows of a dataframe But the more interesting feature is the dataframe viewer.](image6.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n‚ÄçOnce your dataframe is declared, you‚Äôll see it in the Variables panel. You can expand the variable to view all columns and their respective values, or you can click on the table column to inspect the dataframe in an Excel-like fashion\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 7 ‚Äì Dataframe inspection As you can see, you can sort the values, apply filters, inspect missing values, and much more ‚Äì straight from the GUI.](image7.gif){fig-align='center' width=80%}\n:::\n:::\n\n\n\nThe Data Explorer has three primary components, discussed in greater detail in the sections below:\n\n* Data grid: Spreadsheet-like display of the individual cells and columns, as well as sorting\n* Summary panel: Column name, type and missing data percentage for each column\n* Filter bar: Ephemeral filters for specific columns\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 8 ‚Äì Data Explorer three main components.](image8.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Plot Viewer \n\nAn amazing feature of RStudio is the plot viewer. You have a dedicated panel for visualizations, and you can easily cycle through multiple charts. Positron has the same feature, arguably with a somewhat updated interface. Creating a new chart won‚Äôt delete the old one, as you can easily navigate between them using the right-side panel\n‚Äç\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 9 ‚Äì Plot inspection](image9.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n## Variable Inspector \n\nBeing able to inspect complex objects, such as plots, is an essential feature for debugging code and making sure everything works as expected. RStudio also has this feature, but Positron allows you to dig deeper and has a sleeker-looking user interface. As you can see, you can drill down into all the small pieces that are combined to make complex objects.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Image 10 ‚Äì Variable inspection](image10.gif){fig-align='center' width=80%}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}